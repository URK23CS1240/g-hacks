import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import datetime
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import time

# --- 1. Google Sheets Setup ---
SCOPE = ["https://www.googleapis.com/auth/spreadsheets"]
try:
    creds = Credentials.from_service_account_file("credentials.json", scopes=SCOPE)
    client = gspread.authorize(creds)
    SHEET_ID = "1mzMSW3Pp4pGzAhquQQ6-D0FtLa94wO3FICb_joX3Uz4" 
    sheet = client.open_by_key(SHEET_ID).sheet1 
except Exception as e:
    st.error(f"Google Sheets connection error: {e}")
    class DummySheet:
        def append_row(self, data):
            raise Exception("Google Sheet connection failed.")
    sheet = DummySheet()

# ------------------------------------
# --- 2. Streamlit Page Config ---
st.set_page_config(page_title="Karunya Carbon Dashboard", page_icon="üåø", layout="wide")
st.markdown("""
    <style>
        section[data-testid="stSidebar"] { background-image: linear-gradient(#e9ffe9, #bbf2bb); }
        .stButton>button { background-color: #17a672; color: white; padding: 8px 18px; font-weight: 600; }
        .stButton>button:hover { background-color: #138653; color: white; }
        h1, h2, h3 { color: #1a775f; }
    </style>
""", unsafe_allow_html=True)

st.title("üåø Karunya Carbon Footprint Dashboard")
st.write("Track your monthly carbon emissions, get insights, and submit your data below.")

# --- 3. Input Form ---
with st.form("carbon_data_form"):
    st.header("Input Your Data üå±")
    col1, col2 = st.columns(2)

    with col1:
        name = st.text_input("Name *")
        regno = st.text_input("Register Number")
        phone = st.text_input("Phone (10-digit)")
        gender = st.selectbox("Gender", ["Male", "Female", "Other"])
        dept = st.text_input("Department")
        hostel = st.text_input("Hostel/Block Name")
        
    with col2:
        location = st.text_input("Location/Address (e.g., Block B, or nearby landmark)", key="location_input")
        distance = st.number_input("Daily Commute Distance (km)", min_value=0.0, step=0.5)
        electricity = st.number_input("Electricity Use (kWh/month)", min_value=0.0, step=1.0)
        water = st.number_input("Water Use (litres/month)", min_value=0.0, step=10.0)
        diet = st.selectbox("Diet Type", ["Meat-heavy", "Vegetarian", "Vegan"])
        classes = st.slider("Number of Campus Days Last Month", 0, 31, 22)
        activities = st.multiselect(
            "Eco Activities (bonus points):",
            ["Planted Trees", "Recycling", "Carpool", "Cycling", "Green Club"]
        )
    submitted = st.form_submit_button("Calculate and Submit")

# --- 4. Emission Factors ---
factors = {
    "car": 0.192,
    "electricity": 0.82,
    "water": 0.0003,
    "Meat-heavy": 7.0,
    "Vegetarian": 3.8,
    "Vegan": 2.9
}

# --- 5. Calculation & Submission ---
if submitted:
    if not name:
        st.error("Please fill all required fields, especially Name.")
    else:
        transport = distance * 2 * classes * factors["car"]
        power = electricity * factors["electricity"]
        aqua = water * factors["water"]
        diet_co2 = factors[diet] * 30
        eco_bonus = 0.9 if activities else 1.0
        total_co2 = round((transport + power + aqua + diet_co2) * eco_bonus, 2)
        st.success(f"Your estimated monthly carbon footprint is: **{total_co2} kg CO‚ÇÇe**")

        row = [
            name, regno, phone, gender, dept, hostel, location,
            distance, electricity, water, diet, total_co2, classes, ",".join(activities)
        ]
        try:
            sheet.append_row(row)
            st.info("Data saved successfully! üíæ")
        except Exception as e:
            st.error(f"Failed to save data to Google Sheet. Error: {e}")

        # --- Visualizations ---
        st.header("Your Carbon Footprint Breakdown")
        labels = ["Transport", "Electricity", "Water", "Diet"]
        sizes = [transport, power, aqua, diet_co2]
        colv1, colv2, colv3 = st.columns(3)

        with colv1:
            fig1, ax1 = plt.subplots(figsize=(5, 5))
            ax1.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=140, colors=plt.cm.Pastel1.colors)
            ax1.axis('equal')
            ax1.set_title("Footprint Distribution")
            st.pyplot(fig1)

        with colv2:
            months = ["Jan", "Feb", "Mar", "Apr", "May"]
            footprints = [total_co2 * 0.85, total_co2 * 0.90, total_co2 * 0.95, total_co2, total_co2 * 0.88]
            fig2, ax2 = plt.subplots()
            ax2.plot(months, footprints, marker='o', linestyle='-', color='#379683')
            ax2.set_title("Monthly Carbon Trend (Example)")
            ax2.set_ylabel("kg CO‚ÇÇe")
            ax2.set_xlabel("Month")
            ax2.grid(True)
            st.pyplot(fig2)

        with colv3:
            activity_counts = {act: np.random.randint(10, 50) for act in ["Planted Trees", "Recycling", "Carpool", "Cycling", "Green Club"]}
            acts = list(activity_counts.keys())
            counts = list(activity_counts.values())
            fig3, ax3 = plt.subplots()
            ax3.barh(acts, counts, color=plt.cm.Pastel2.colors)
            ax3.set_title("Campus Eco-Activity Participation")
            st.pyplot(fig3)

# ---------------------------------------------------------------------
# --- 7. Community Leaderboard & Visualizations (No Maps) ---
st.header("üìä Community Dashboard Visualizations")

SHEET_COLUMNS = [
    'name', 'regno', 'phone', 'gender', 'dept', 'hostel', 'location',
    'distance', 'electricity', 'water', 'diet', 'total_co2', 'classes', 'activities'
]

try:
    data = sheet.get_all_values()
    
    if data:
        df = pd.DataFrame(data, columns=SHEET_COLUMNS)
        
        # Convert numeric columns
        df['total_co2'] = pd.to_numeric(df['total_co2'], errors='coerce').fillna(0)
        df['distance'] = pd.to_numeric(df['distance'], errors='coerce').fillna(0)
        df['electricity'] = pd.to_numeric(df['electricity'], errors='coerce').fillna(0)
        df['water'] = pd.to_numeric(df['water'], errors='coerce').fillna(0)
        
        st.subheader("üèÜ Carbon Footprint Leaderboard")
        top_n = st.slider("Select number of participants to display:", min_value=1, max_value=min(50, len(df)), value=10)
        leaderboard = df.sort_values(by='total_co2', ascending=False).head(top_n)
        
        fig, ax = plt.subplots(figsize=(max(8, 0.7 * top_n), 6))
        ax.bar(leaderboard['name'], leaderboard['total_co2'], color=plt.cm.viridis(np.linspace(0,1,len(leaderboard))))
        ax.set_ylabel("Total Carbon Footprint (kg CO‚ÇÇe)")
        ax.set_xlabel("Participant Name")
        ax.set_title(f"Top {top_n} Participants by CO‚ÇÇ Emissions")
        plt.xticks(rotation=45, ha='right')
        plt.tight_layout()
        st.pyplot(fig)
        
        # --- Interactive Pie Chart: Diet Distribution ---
        st.subheader("üçΩÔ∏è Diet Distribution Among Participants")
        diet_counts = df['diet'].value_counts()
        fig2, ax2 = plt.subplots()
        ax2.pie(diet_counts, labels=diet_counts.index, autopct='%1.1f%%', colors=plt.cm.Set3.colors)
        ax2.set_title("Diet Type Distribution")
        st.pyplot(fig2)
        
        # --- Scatter Plot: Commute Distance vs Total CO‚ÇÇ ---
        st.subheader("üöó Commute Distance vs Total Carbon Footprint")
        fig3, ax3 = plt.subplots()
        ax3.scatter(df['distance'], df['total_co2'], color='#379683', alpha=0.7)
        ax3.set_xlabel("Daily Commute Distance (km)")
        ax3.set_ylabel("Total Carbon Footprint (kg CO‚ÇÇe)")
        ax3.set_title("Commute Impact on CO‚ÇÇ Emissions")
        ax3.grid(True, linestyle='--', alpha=0.5)
        st.pyplot(fig3)
        
        # --- Horizontal Bar Chart: Eco Activities Participation ---
        st.subheader("üå± Eco-Activity Participation")
        activity_cols = ['Planted Trees', 'Recycling', 'Carpool', 'Cycling', 'Green Club']
        activity_counts = {act:0 for act in activity_cols}
        for acts in df['activities']:
            if acts:
                for act in acts.split(','):
                    act = act.strip()
                    if act in activity_counts:
                        activity_counts[act] += 1
        fig4, ax4 = plt.subplots()
        ax4.barh(list(activity_counts.keys()), list(activity_counts.values()), color=plt.cm.Pastel1.colors)
        ax4.set_xlabel("Number of Participants")
        ax4.set_title("Campus Eco-Activity Participation")
        st.pyplot(fig4)
        
        # --- Optional Filtered Table ---
        if st.checkbox("Show leaderboard table"):
            display_cols = ['name', 'regno', 'hostel', 'diet', 'total_co2', 'distance', 'electricity', 'water', 'activities']
            st.dataframe(df[display_cols].sort_values(by='total_co2', ascending=False).reset_index(drop=True))
        
    else:
        st.info("No data available in the sheet yet! Submit a form entry to populate the dashboard.")
        
except Exception as e:
    st.error(f"‚ö†Ô∏è Error loading dashboard data: {e}")

# --- 8. Footer ---
st.markdown("---")
st.caption("Karunya University | Hackathon Prototype | Powered by Streamlit + Google APIs üåø")
